DESIGN PATTERNS

I. CREATIONAL PATTERNS
Creational patterns provide various object creation mechanisms, which increase flexibility and reuse of existing code.
-------------------
1. SINGLETON is a creational design pattern that lets you ensure that a class has only one instance,
while providing a global access point to this instance.
    Applicability
    * Use the Singleton pattern when a class in your program should have just a single instance available to all
      clients; for example, a single database object shared by different parts of the program.
    * Use the Singleton pattern when you need stricter control over global variables.

    Pros: * You can be sure that a class has only a single instance.
          * You gain a global access point to that instance.
          * The singleton object is initialized only when it’s requested for the first time.

    Cons: * Violates the Single Responsibility Principle. The pattern solves two problems at the time.
          * The Singleton pattern can mask bad design, for instance, when the components of the program
            know too much about each other.
          * The pattern requires special treatment in a multithreaded environment so that multiple threads
            won’t create a singleton object several times.
          * It may be difficult to unit test the client code of the Singleton because many test frameworks
            rely on inheritance when producing mock objects. Since the constructor of the singleton class
            is private and overriding static methods is impossible in most languages, you will need to think
            of a creative way to mock the singleton. Or just don’t write the tests. Or don’t use the Singleton pattern.

2. FACTORY METHOD is a creational design pattern that provides an interface for creating objects in
a superclass, but allows subclasses to alter the type of objects that will be created.
    Applicability
    * Use the Factory Method when you don’t know beforehand the exact types and dependencies of the objects your code
      should work with.
    * Use the Factory Method when you want to provide users of your library or framework with a way to extend its
      internal components.
    * Use the Factory Method when you want to save system resources by reusing existing objects instead of rebuilding
      them each time.

    Pros: * You avoid tight coupling between the creator and the concrete products.
          * Single Responsibility Principle. You can move the product creation code into one place in the program,
            making the code easier to support.
          * Open/Closed Principle. You can introduce new types of products into the program without breaking
            existing client code.

    Cons: * The code may become more complicated since you need to introduce a lot of new subclasses to implement
            the pattern. The best case scenario is when you’re introducing the pattern into an existing hierarchy
            of creator classes.

3. ABSTRACT FACTORY is a creational design pattern that lets you produce families of related objects
without specifying their concrete classes.
    Applicability
    * Use the Abstract Factory when your code needs to work with various families of related products, but you don’t
      want it to depend on the concrete classes of those products—they might be unknown beforehand or you simply want
      to allow for future extensibility.

    Pros: * You can be sure that the products you’re getting from a factory are compatible with each other.
          * You avoid tight coupling between concrete products and client code.
          * Single Responsibility Principle. You can extract the product creation code into one place,
            making the code easier to support.
          * Open/Closed Principle. You can introduce new variants of products without breaking existing client code.

    Cons: * The code may become more complicated than it should be, since a lot of new interfaces and classes are
            introduced along with the pattern.

4. BUILDER is a creational design pattern that lets you construct complex objects step by step.
The pattern allows you to produce different types and representations of an object using the same construction code.
    Applicability
    * Use the Builder pattern to get rid of a “telescopic constructor”.
    * Use the Builder pattern when you want your code to be able to create different representations of some product
      (for example, stone and wooden houses).
    * Use the Builder to construct Composite trees or other complex objects.

    Pros: * You can construct objects step-by-step, defer construction steps or run steps recursively.
          * You can reuse the same construction code when building various representations of products.
          * Single Responsibility Principle. You can isolate complex construction code from the business logic of
            the product.

    Cons: * The overall complexity of the code increases since the pattern requires creating multiple new classes.

5. PROTOTYPE is a creational design pattern that lets you copy existing objects without making your code dependent on
their classes.
    Applicability
    * Use the Prototype pattern when your code shouldn’t depend on the concrete classes of objects that you need
      to copy.
    * Use the pattern when you want to reduce the number of subclasses that only differ in the way they initialize
      their respective objects. Somebody could have created these subclasses to be able to create objects with a
      specific configuration.

    Pros: * You can clone objects without coupling to their concrete classes.
          * You can get rid of repeated initialization code in favor of cloning pre-built prototypes.
          * You can produce complex objects more conveniently.
          * You get an alternative to inheritance when dealing with configuration presets for complex objects.

    Cons: * Cloning complex objects that have circular references might be very tricky.

II. STRUCTURAL PATTERNS
Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures
flexible and efficient.
-------------------
1. ADAPTER is a structural design pattern that allows objects with incompatible interfaces to collaborate.
    Applicability
    * Use the Adapter class when you want to use some existing class, but its interface isn’t compatible with the
      rest of your code.
    * Use the pattern when you want to reuse several existing subclasses that lack some common functionality that
      can’t be added to the superclass.

    Pros: * Single Responsibility Principle. You can separate the interface or data conversion code from the primary
            business logic of the program.
          * Open/Closed Principle. You can introduce new types of adapters into the program without breaking the
            existing client code, as long as they work with the adapters through the client interface.

    Cons: * The overall complexity of the code increases because you need to introduce a set of new interfaces and
            classes. Sometimes it’s simpler just to change the service class so that it matches the rest of your code.

2. BRIDGE is a structural design pattern that lets you split a large class or a set of closely related classes into
two separate hierarchies—abstraction and implementation—which can be developed independently of each other.
    Applicability
    * Use the Bridge pattern when you want to divide and organize a monolithic class that has several variants
      of some functionality (for example, if the class can work with various database servers).
    * Use the pattern when you need to extend a class in several orthogonal (independent) dimensions.

    Pros: * You can create platform-independent classes and apps.
          * The client code works with high-level abstractions. It isn’t exposed to the platform details.
          * Open/Closed Principle. You can introduce new abstractions and implementations independently from each other.
          * Single Responsibility Principle. You can focus on high-level logic in the abstraction and on platform
            details in the implementation.

    Cons: * You might make the code more complicated by applying the pattern to a highly cohesive class.

